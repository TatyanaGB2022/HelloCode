int[] arr = { 1, 2, 3, 4, 5, 6, 7, 1, 1 }; /// 1.заведем массив, который будем отсортировывать/ При чем для этого алгоритма 
// совсем не важно, если значения будут повторяться
// 2. На следущем этапе нужно решить подзадачу, которая будет отвечать за то чтобы вывести данный массив на экран
// Для этот напишем методы. Первый это метод войд, который будет называться принтэрэй. В икачестве аргумента
//бутет приходить массив.

void PrintArray(int[] array)
{
  int count = array.Length;
  for (int i = 0; i < count; i++)
  {
    System.Console.Write($"{array[i]}"); //3. можно сделать, чтобы вывод осуществлялся в одну строку
  }
  System.Console.WriteLine();  //4. После того как вывод закончен мы выведем пустую строчку
}

//следующим этапом пишем метод, который будет упорядочивать наш массив
void SelectionSort(int[] array) // 1. в качестве аргумента будет приходить некий массив эрэй
{
  for (int i = 0; i < array.Length - 1; i++) // 2. нам нужно пробежаться по всем элементам нашего массива
  {
    int minPosition = i; // 3. на следущем этапе мы определяем позицию на которую мы смотрим, и запоминаем ту самую  
    // позицию рабочего элемента, для которого в дальнейшем будем производить какие-то действия
    for (int j = i + 1; j < array.Length; j++) //7. ищем минимальный элемен. Тот кусочек, который был отсотрирован 
    // мы его не касаемся, а то что у нас отсортировано начанается с и+1. И идем до последнего элемента эрэй.Лэнз
    {
      if (array[j] < array[minPosition]) minPosition = j;// 8. ищем элемент минимальный. Для того чтобы 
      //это сделать мы смотрим текущий, если он меньше того элемента, который мы предполагали на минимальной позиции, то 
      //наша задача это эту текщую минпозицию нужно сохранить minPosition = j. 
      //Блок кода с 24-31  ищет только максимальный элемент
    }
    int temporary = array[i]; // 4. нам потребуется поменять значение нашей минимальной позиции с той позицией,
    //которую мы нашли
    array[i] = array[minPosition]; // 5. в итую позицию мы должны положить тот элемент, который будет найден в процессе 
    // простой обмен переменных местами
    array[minPosition] = temporary; // 6. в минимальную позицию минпозишон кладем тот элемент, который был
    // времено (из 31 стоки)
  }  //с33 по 37 здесь производится swap.
}

PrintArray(arr);
SelectionSort(arr); // вызываем упорядочивание массива

PrintArray(arr);

// Дальше самый важный пункт заключается в том, что если мы начинаем позицию поиска
// максимального от индекса i+1, где i меняется до максимального значения позиции нашего
// массива, то в этом случае мы должны будем искусственно одну единицу отнять. Тогда
// получится, что ровно это i+1 даст общее количество элементов.
