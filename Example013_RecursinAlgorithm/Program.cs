// string[,] table = new string[2, 5]; 
// table [1, 2] = "слово";

// for(int rows = 0; rows < 2; rows++)
// {
//   for(int columns = 0; columns < 5; columns++)
//   {
//     System.Console.WriteLine($"-{table[rows, columns]}-");
//   }
// }

// int[,] matrix = new int [3, 4];

// for(int i = 0; i < 3; i ++)
// {
//   for(int j = 0; j < 4; j ++)
//   {
//     System.Console.WriteLine($"{matrix[i, j]} ");
//   }
// } int[,] matrix = new int [3, 4];


// ДРУГОЙ МЕТОД
// int[,] matrix = new int [3, 4];

// for(int i = 0; i < 3; i ++)
// {
//   for(int j = 0; j < 4; j ++)
//   {
//     System.Console.Write($"{matrix[i, j]} ");
//   }
//   System.Console.WriteLine();
// }

// ДРУГОЙ МЕТОД

// int[,] matrix = new int [3, 4];

// for(int i = 0; i < matrix.GetLength(0); i ++)
// {
//   for(int j = 0; j < matrix.GetLength(1); j ++)
//   {
//     System.Console.Write($"{matrix[i, j]} ");
//   }
//   System.Console.WriteLine();
// }

// МЕТОД, КОТОРЫЙ БУДЕТ ПЕЧАТАТЬ МАТРИЦУ И ЗАПЛНЯТЬ ЕЕ ЦИФРАМИ

// int[,] matrix = new int[3, 4];

// void PrintArray(int[,] matr)
// {
//   for (int i = 0; i < matr.GetLength(0); i++)
//   {
//     for (int j = 0; j < matr.GetLength(1); j++)
//     {
//       System.Console.Write($"{matr[i, j]} ");
//     }
//     System.Console.WriteLine();
//   }
// }
// PrintArray(matrix);

// МЕТОД, КОТРЫЙ БУДЕТ ЗАПОЛНЯТЬ МАТРИЦУ СЛУЧАЙНЫМИ ЧИСЛАМИ

// int[,] matrix = new int[3, 4];

// void PrintArray(int[,] matr)
// {
//   for (int i = 0; i < matr.GetLength(0); i++)
//   {
//     for (int j = 0; j < matr.GetLength(1); j++)
//     {
//       System.Console.Write($"{matr[i, j]} ");
//     }
//     System.Console.WriteLine();
//   }
// }

// void FillArray(int[,] matr)
// {
//   for(int i = 0; i < matr.GetLength(0); i ++)
//   {
//     for(int j = 0; j < matr.GetLength(1); j ++)
//     {
//       matr[i, j] = new Random().Next(1, 10);
//     }
//   }
// }
// PrintArray(matrix);
// FillArray(matrix);
// System.Console.WriteLine();
// PrintArray(matrix);

// ЗАКРАШИВАЕМ ВНУТРЕННЮЮ ОБЛАСТЬ КАРТИНКИ

// int[,] pic = new int[,]
// {
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };
// void PrintImage(int[,] image)
// {
//   for (int i = 0; i < image.GetLength(0); i++)
//   {
//     for (int j = 0; j < image.GetLength(1); j++)
//     {
//       if (image[i, j] == 0) Console.Write($" "); //будем проверать: если текущий элемент итый и джитый совпадает с 0, то
//       //будем печатать искуственно пробел
//       else Console.Write($"+"); //если не 0, то будем печатать +
//     }
//     Console.WriteLine();
//   }
// }
// PrintImage(pic);

//ОПИШЕМ МЕТОД, КОТОРЫЙ БУДЕТ ЗАКРАШИВАТЬ НАШУ КАРТИНКУ

// int[,] pic = new int[,]
// {
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
// {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };
// void PrintImage(int[,] image)
// {
//   for (int i = 0; i < image.GetLength(0); i++)
//   {
//     for (int j = 0; j < image.GetLength(1); j++)
//     {
//       if (image[i, j] == 0) Console.Write($" "); //будем проверать: если текущий элемент итый и джитый совпадает с 0, то
//       //будем печатать искуственно пробел
//       else Console.Write($"+"); //если не 0, то будем печатать +
//     }
//     Console.WriteLine();
//   }
// }

// void FillImage(int row, int col) //в качестве агрумента укажу позицию строки пикселя с которого начать закраску
// {
//   if (pic[row, col] == 0) //если текущий пиксель пик с указанной позиции роу кол равен 0, т.е. не закрашен
//   {
//     pic[row, col] = 1; //в этом случае будем его красить единичкой
//     FillImage(row - 1, col); //FillImage вызывает сам себя.Сначала поднимаемся на строчку выше роу -1
//     FillImage(row, col - 1); //идем в той же строке, но влево. кол -1
//     FillImage(row + 1, col);// идем вниз, увеличиваем роу на 1
//     FillImage(row, col + 1); // идем вправо
//   }
// }
// PrintImage(pic);
// FillImage(13, 13); //качестве случайной точки указали 13, 13. Эта точка должна быть внутри изображения
// PrintImage(pic);


// ФАКТОРИАЛ НАПРИМЕР ТРЕХ

// int Factorial(int n) // метод возвращающий инт. В качестве аргумента другое целое число
// {
//   // 1! = 1
//   // 0! = 1
//   if (n == 1) return 1;//если эн = 1, то мы возвращаем 1.
//   else return n * Factorial(n - 1);// в противном случае - взять текущее зачение и умножить на факториал предыдущего числа,
// }                                  // то есть эн-1
// Console.WriteLine(Factorial(3)); // 1 * 2 * 3 = 6


// ФАКТОРИАЛ НАПРИМЕР 40
// int Factorial(int n)
// {
//  // 1! = 1
//  // 0! = 1
//  if(n == 1) return 1;
//  else return n * Factorial(n-1);
// }
// for (int i = 1; i < 40; i++)
// {
//  Console.WriteLine($"{i}! = {Factorial(i)}"); //проверим, до какого значения можем посчитать факториал.
//  //Всё хорошо до 17!. не вмещается в тип данных integer, поэтому появляется первая ваша задача,связанная с переполнением.


// double Factorial(int n)
// {
//   // 1! = 1
//   // 0! = 1
//   if (n == 1) return 1;
//   else return n * Factorial(n - 1);
// }
// for (int i = 1; i < 40; i++)
// {
//   Console.WriteLine($"{i}! = {Factorial(i)}");
// }

// КАК БУДУТ СЧИТАТЬСЯ НЕКОТОРЫЕ ЧИСЛА ФИБОНАЧЧИ
// f(1) = 1
// f(2) = 1
// f(n) = f(n-1) + f(n-2)
// int Fibonacci(int n)
// {
//  if(n == 1 || n == 2) return 1;
//  else return Fibonacci(n-1) + Fibonacci(n-2);
// }
// for (int i = 1; i < 10; i++)
// {
//  Console.WriteLine(Fibonacci(i));
// }

//По аналогии с факториалом попробуем посчитать первые 40 чисел Фибоначчи так,
//чтобы возвращалось double-значение. 
// double Fibonacci(int n)
// {
//   if (n == 1 || n == 2) return 1;
//   else return Fibonacci(n - 1) + Fibonacci(n - 2);
// }
// for (int i = 1; i < 40; i++)
// {
//   //Console.WriteLine(Fibonacci(i));
//   Console.WriteLine($"f({i}) = {Fibonacci(i)}");//Попробуем понять, с какого числа начинается проблема. 
// }

//